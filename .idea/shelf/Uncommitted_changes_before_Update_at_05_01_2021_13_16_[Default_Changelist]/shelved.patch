Index: app/src/main/java/com/example/yesudu/chat/ChatFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.yesudu.chat;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.text.Editable;\r\nimport android.text.format.DateFormat;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.yesudu.R;\r\nimport com.example.yesudu.account.User;\r\nimport com.example.yesudu.dialog.AcceptDialog;\r\nimport com.example.yesudu.dialog.ComplainDialog;\r\nimport com.example.yesudu.dialog.GoToAdminDialog;\r\nimport com.example.yesudu.dialog.EditMessageDialog;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\n\r\npublic class ChatFragment extends ChatBaseFragment {\r\n    public static final String KEY_TO_RECEIVER_UUID=\"recevierID\";\r\n    public static final String KEY_TO_RECEIVER_PHOTO_URL = \"recevierPHOTO_URL\";\r\n    public static final int GO_TO_ADMIN_REQUEST = 1010;\r\n    public static final int COMPLAIN_REQUEST = 2020;\r\n    public static final int KEY_ACCEPT_BLOCK_USER=101;\r\n    public static final int KEY_ACCEPT_DELETE_CHAT=102;\r\n    private ValueEventListener setChatListener;\r\n    private String seenText;\r\n    private DatabaseReference referenceWriting;\r\n    private ChatMessageAdapter adapter;\r\n    private ValueEventListener seenListener;\r\n    private boolean setChatListenerConnected;\r\n    private ImageView verifiedImage;\r\n    private ValueEventListener blockChatListener;\r\n    private ValueEventListener deleteMessageListener;\r\n    private ValueEventListener adminMessagesListener;\r\n\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n        activity=(CallBack) context;\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\r\n        setChatListenerConnected=false;\r\n        delete_string =getResources().getString(R.string.delete_users);\r\n        admin_string=getResources().getString(R.string.admin);\r\n        seenText= getResources().getString(R.string.seen_text);\r\n        View v=inflater.inflate(R.layout.chat_fragment,container,false);\r\n        receiverUuid=getArguments().getString(KEY_TO_RECEIVER_UUID);\r\n        receiverPhotoUrl = getArguments().getString(KEY_TO_RECEIVER_PHOTO_URL);\r\n        toolbar=v.findViewById(R.id.toolbarFr);\r\n        verifiedImage = v.findViewById(R.id.verified_image_chat);\r\n        complainView =v.findViewById(R.id.complain_button);\r\n        complainView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n\r\n                GoToAdminDialog dialog=new GoToAdminDialog();\r\n                dialog.setTargetFragment(ChatFragment.this, GO_TO_ADMIN_REQUEST);\r\n                dialog.show(getFragmentManager(),null);\r\n                //activity.goToAdmin();\r\n            }\r\n        });\r\n        if (receiverUuid.equals(getResources().getString(R.string.admin_key))){\r\n            complainView.setVisibility(View.GONE);\r\n            toolbar.setEnabled(false);\r\n        }\r\n        else setToolbarToAcc();\r\n        statusText = v.findViewById(R.id.online_text_in_chat);\r\n        recyclerView = v.findViewById(R.id.list_of_messages);\r\n        fab= v.findViewById(R.id.fab);\r\n        send_image = v.findViewById(R.id.send_image_button);\r\n        send_image.setOnClickListener(this);\r\n        input = v.findViewById(R.id.input);\r\n        input.addTextChangedListener(this);\r\n        fab.setOnClickListener(this);\r\n        reference = FirebaseDatabase.getInstance().getReference(\"chats\");\r\n        referenceWriting = FirebaseDatabase.getInstance().getReference(\"users\");\r\n        storageReference = FirebaseStorage.getInstance().getReference(\"ChatImage\");\r\n        username=v.findViewById(R.id.username_text);\r\n        circleImageView = v.findViewById(R.id.circle_image_chat);\r\n        if (receiverPhotoUrl.equals(\"default\")){\r\n            circleImageView.setImageResource(R.drawable.admin_icon);\r\n        }\r\n        else{\r\n            Glide.with(this).load(receiverPhotoUrl).into(circleImageView);\r\n        }\r\n\r\n        blockListener=reference.child(generateKey()).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for (DataSnapshot snapshot1:snapshot.getChildren()){\r\n\r\n                    if (snapshot1.getKey().equals(\"firstBlock\") && User.getCurrentUser().getUuid().equals(secondKey) && snapshot1.getValue().equals(\"block\")){\r\n                        try {\r\n                            input.setText(getActivity().getString(R.string.blocked_chat));\r\n                            blockClick();\r\n                        } catch (Exception e) {\r\n                            blockClick();\r\n                        }\r\n                    }\r\n\r\n                    else if (snapshot1.getKey().equals(\"secondBlock\") && User.getCurrentUser().getUuid().equals(firstKey) && snapshot1.getValue().equals(\"block\")){\r\n                        try {\r\n                            input.setText(getActivity().getString(R.string.blocked_chat));\r\n                            blockClick();\r\n                        } catch (Exception e) {\r\n                            blockClick();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {}\r\n        });\r\n\r\n\r\n        //TODO доделать\r\n        adminMessagesListener=reference.child(generateKeyToAdminChat()).child(\"message\").addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for (DataSnapshot snapshot1:snapshot.getChildren()){\r\n                    ChatMessage message=snapshot1.getValue(ChatMessage.class);\r\n                    if (User.getCurrentUser().getUuid().equals(firstKey)){\r\n                        if (message.getFromUserUUID().equals(secondKey)){\r\n                            if (message.getFirstSeen().equals(getActivity().getString(R.string.not_seen_text))){\r\n                                Log.e(\"TUT_AD_MESS\",\"new Message from admin\");\r\n                                complainView.setBackgroundResource(R.color.no_seen);\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (User.getCurrentUser().getUuid().equals(secondKey)){\r\n                        if (message.getFromUserUUID().equals(firstKey)){\r\n                            Log.d(\"TUT_NULL?\", String.valueOf(message.getSecondSeen()));\r\n                            if (message.getSecondSeen().equals(\"no seen\")){\r\n                                Log.e(\"TUT_AD_MESS\",\"new Message from admin\");\r\n                                complainView.setBackgroundResource(R.color.no_seen);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n\r\n\r\n        if (User.getCurrentUser().getAdmin_block().equals(\"block\") && !receiverUuid.equals(getActivity().getString(R.string.admin_key))){\r\n            //TODO Сюда вочкнуть картинку на блокировку\r\n            input.setText(getActivity().getString(R.string.blocked_by_admin));\r\n            blockClick();\r\n        }\r\n\r\n        if (receiverUuid.equals(getActivity().getResources().getString(R.string.admin_key))){\r\n            statusText.setText(getActivity().getString(R.string.app_name));\r\n            username.setText(admin_string);\r\n        }\r\n        else setStatus();\r\n        displayChatMessages();\r\n        return v;\r\n    }\r\n\r\n    private void blockClick() {\r\n        input.setEnabled(false);\r\n        fab.setEnabled(false);\r\n        send_image.setEnabled(false);\r\n        toolbar.setEnabled(false);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        seenMessage();\r\n        setChatListener();\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n        activity=null;\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void setToolbarToAcc() {\r\n        super.setToolbarToAcc();\r\n        toolbar.inflateMenu(R.menu.chat_menu);\r\n        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {\r\n            @Override\r\n            public boolean onMenuItemClick(MenuItem item) {\r\n                switch (item.getItemId()){\r\n                    case R.id.delete_chat:{\r\n                        AcceptDialog acceptDialog = new AcceptDialog(reference,deleteMessageListener,KEY_ACCEPT_DELETE_CHAT,receiverUuid,username.getText().toString());\r\n                        acceptDialog.show(getFragmentManager(),null);\r\n                        //deleteChat();\r\n                        return true;\r\n                    }\r\n                    case R.id.block_chat:{\r\n                        AcceptDialog acceptDialog = new AcceptDialog(reference,blockChatListener,KEY_ACCEPT_BLOCK_USER,receiverUuid,username.getText().toString());\r\n                        acceptDialog.show(getFragmentManager(),null);\r\n                        //blockChat();\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    void displayChatMessages(){\r\n        adapter = new ChatMessageAdapter(ChatMessage.class, R.layout.chat_list_item_right, ChatMessageAdapter.ChatMessageHolder.class,\r\n                FirebaseDatabase.getInstance().getReference(\"chats\").child(generateKey()).child(\"message\"),\r\n                receiverUuid, getActivity(), getFragmentManager(),ChatFragment.this,EditMessageDialog.TYPE_OF_USER_USUAL);\r\n        LinearLayoutManager layoutManager = new LinearLayoutManager(getActivity());\r\n        layoutManager.setStackFromEnd(true);\r\n        adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver() {\r\n            @Override\r\n            public void onItemRangeInserted(int positionStart, int itemCount) {\r\n                super.onItemRangeInserted(positionStart, itemCount);\r\n                int friendlyMessageCount = adapter.getItemCount();\r\n                int lastVisiblePosition = layoutManager.findLastCompletelyVisibleItemPosition();\r\n                if (lastVisiblePosition == -1 ||\r\n                        (positionStart >= (friendlyMessageCount - 1) && lastVisiblePosition == (positionStart - 1))) {\r\n                    recyclerView.scrollToPosition(positionStart);\r\n                }\r\n            }\r\n        });\r\n        recyclerView.setAnimation(null);\r\n        recyclerView.setLayoutManager(layoutManager);\r\n        recyclerView.setAdapter(adapter);\r\n        if (adapter!=null)\r\n            adapter.notifyDataSetChanged();\r\n\r\n    }\r\n\r\n    private void seenMessage(){\r\n        seenListener=reference.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                for (DataSnapshot snapshot1 : snapshot.getChildren())\r\n                    for (DataSnapshot snapshot2 : snapshot1.getChildren()) {\r\n                        if (!snapshot2.getKey().equals(\"firstBlock\") && !snapshot2.getKey().equals(\"secondBlock\")) {\r\n                            for (DataSnapshot snapshot3 : snapshot2.getChildren()) {\r\n                                ChatMessage message = snapshot3.getValue(ChatMessage.class);\r\n                                if ((message.getFromUserUUID().equals(User.getCurrentUser().getUuid()) && message.getToUserUUID().equals(getArguments().getString(KEY_TO_RECEIVER_UUID))) ||\r\n                                        (message.getFromUserUUID().equals(getArguments().getString(KEY_TO_RECEIVER_UUID)) && message.getToUserUUID().equals(User.getCurrentUser().getUuid()))) {\r\n                                    HashMap<String, Object> hashMap = new HashMap<>();\r\n                                    if ((message.getToUserUUID().equals(User.getCurrentUser().getUuid())) && (User.getCurrentUser().getUuid().equals(firstKey)))\r\n                                        hashMap.put(\"firstKey\", seenText);\r\n                                    else if ((message.getToUserUUID().equals(User.getCurrentUser().getUuid())) && (User.getCurrentUser().getUuid().equals(secondKey)))\r\n                                        hashMap.put(\"secondKey\", seenText);\r\n                                    snapshot3.getRef().updateChildren(hashMap);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n            }\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        if (v.getId()==R.id.fab){\r\n            sendMessage();\r\n        }\r\n        if (v.getId()==R.id.send_image_button){\r\n            openImage();\r\n        }\r\n    }\r\n    protected void sendMessage() {\r\n        if (image_rui!=null){\r\n\r\n                if (!setChatListenerConnected) {\r\n                    reference.child(generateKey()).addValueEventListener(setChatListener);\r\n                    setChatListenerConnected = true;\r\n                }\r\n            reference.child(generateKey()).child(\"message\")\r\n                    .push()\r\n                    .setValue(new ChatMessage(input.getText().toString(),\r\n                            User.getCurrentUser().getName(),User.getCurrentUser().getUuid(),receiverUuid,getActivity().getString(R.string.not_seen_text),\r\n                            getActivity().getString(R.string.not_seen_text),(image_rui!=null) ? image_rui.toString(): null,\"no delete\",\"no delete\",\"no\"));\r\n        }\r\n        else if (!input.getText().toString().equals(\"\")) {\r\n            //setChatListener();\r\n            if (!setChatListenerConnected) {\r\n                reference.child(generateKey()).addValueEventListener(setChatListener);\r\n                setChatListenerConnected=true;\r\n            }\r\n            reference.child(generateKey()).child(\"message\")\r\n                    .push()\r\n                    .setValue(new ChatMessage(input.getText().toString(),\r\n                            User.getCurrentUser().getName(),User.getCurrentUser().getUuid(),receiverUuid,getActivity().getString(R.string.not_seen_text),\r\n                            getActivity().getString(R.string.not_seen_text),(image_rui!=null) ? image_rui.toString(): null,\"no delete\",\"no delete\",\"no\"));\r\n        }\r\n        image_rui=null;\r\n        input.setText(\"\");\r\n    }\r\n\r\n    @Override\r\n    protected void setChatListener() {\r\n        HashMap<String, Object> map = new HashMap<>();\r\n        setChatListener= new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                if (!snapshot.exists()) {\r\n                    map.put(\"firstBlock\", \"no block\");\r\n                    map.put(\"secondBlock\", \"no block\");\r\n                    map.put(\"firstFavorites\", \"no\");\r\n                    map.put(\"secondFavorites\", \"no\");\r\n                    reference.child(generateKey()).updateChildren(map);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    @Override\r\n    protected String generateKey(){\r\n        ArrayList<String> templist=new ArrayList<>();\r\n        templist.add(User.getCurrentUser().getUuid());\r\n        templist.add(receiverUuid);\r\n        Collections.sort(templist);\r\n        firstKey=templist.get(0);\r\n        secondKey = templist.get(1);\r\n        return templist.get(0)+templist.get(1);\r\n    }\r\n\r\n\r\n    private String generateKeyToAdminChat(){\r\n        ArrayList<String> templist=new ArrayList<>();\r\n        templist.add(User.getCurrentUser().getUuid());\r\n        templist.add(getActivity().getString(R.string.admin_key));\r\n        Collections.sort(templist);\r\n        firstKey=templist.get(0);\r\n        secondKey = templist.get(1);\r\n        return templist.get(0)+templist.get(1);\r\n    }\r\n\r\n    public static ChatFragment newInstance(String toUserUUID, String photo_url){\r\n        ChatFragment fragment = new ChatFragment();\r\n        Bundle bundle = new Bundle();\r\n        bundle.putString(KEY_TO_RECEIVER_UUID, toUserUUID);\r\n        bundle.putString(KEY_TO_RECEIVER_PHOTO_URL,photo_url);\r\n        fragment.setArguments(bundle);\r\n        return fragment;\r\n    }\r\n\r\n    protected void setStatus(){\r\n        FirebaseDatabase.getInstance().getReference(\"users\").child(receiverUuid).addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                User user = snapshot.getValue(User.class);\r\n                try {\r\n                    if (user.getTyping().equals(User.getCurrentUser().getUuid()) && user.getAdmin_block().equals(\"unblock\")){\r\n                       statusText.setText(R.string.typing);\r\n                    }\r\n                    else if (user.getStatus().equals(getResources().getString(R.string.label_offline)))\r\n                        statusText.setText(getActivity().getString(R.string.was)+\" \" + DateFormat.format(\"dd MMMM yyyy\", user.getOnline_time())+\" \"+\r\n                                getActivity().getString(R.string.in)+\" \"+DateFormat.format(\"HH:mm\", user.getOnline_time()));\r\n                    else statusText.setText(user.getStatus());\r\n                    username.setText(user.getName());\r\n                    if (user.getVerified().equals(\"yes\")){\r\n                        verifiedImage.setVisibility(View.VISIBLE);\r\n                    }\r\n                    else verifiedImage.setVisibility(View.INVISIBLE);\r\n                } catch (Exception e) {\r\n                    statusText.setText(delete_string);\r\n                    username.setText(\"\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        this.removeAllListener();\r\n        setWriting(\"unwriting\");\r\n        if (deleteMessageListener !=null) reference.child(generateKey()).child(\"message\").removeEventListener(deleteMessageListener);\r\n        if (blockChatListener != null) reference.child(generateKey()).removeEventListener(blockChatListener);\r\n        if (adminMessagesListener !=null) reference.child(generateKeyToAdminChat()).child(\"message\").removeEventListener(adminMessagesListener);\r\n    }\r\n\r\n    @Override\r\n    protected void removeAllListener() {\r\n        super.removeAllListener();\r\n        if (seenListener!=null)\r\n            reference.removeEventListener(seenListener);\r\n        seenListener=null;\r\n    }\r\n\r\n    @Override\r\n    protected void setWriting(String writing) {\r\n        HashMap<String,Object> map=new HashMap<>();\r\n        map.put(\"typing\", writing);\r\n        referenceWriting.child(User.getCurrentUser().getUuid()).updateChildren(map);\r\n    }\r\n\r\n    @Override\r\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\r\n        if (s.toString().trim().length() ==0){\r\n            setWriting(\"unwriting\");\r\n        }else if (!s.toString().equals(getActivity().getString(R.string.blocked_chat)) && !s.toString().equals(getActivity().getString(R.string.blocked_by_admin))){\r\n            setWriting(receiverUuid);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void afterTextChanged(Editable s) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        if (resultCode == Activity.RESULT_OK) {\r\n            if (requestCode== GO_TO_ADMIN_REQUEST){\r\n                switch (data.getIntExtra(GoToAdminDialog.BTN_CODE,-1)){\r\n                    case GoToAdminDialog.CHAT_BTN_CODE:activity.goToAdmin();\r\n                    break;\r\n                    case GoToAdminDialog.COMPLAIN_BTN_CODE:{\r\n                        ComplainDialog dialog=new ComplainDialog(ComplainDialog.BASE_COMPLAIN_CODE,getFragmentManager(),ChatFragment.this);\r\n                        dialog.setTargetFragment(ChatFragment.this,COMPLAIN_REQUEST);\r\n                        dialog.show(getFragmentManager(),null);\r\n                    };\r\n                }\r\n            }\r\n            else if (requestCode == COMPLAIN_REQUEST){\r\n                if (!data.getStringExtra(ComplainDialog.COMPLAIN_CODE).equals(getActivity().getString(R.string.another_reason_title))) {\r\n                    String complaint= data.getStringExtra(ComplainDialog.COMPLAIN_CODE);\r\n                    if (complaint.equals(getActivity().getString(R.string.false_name))\r\n                        || complaint.equals(getActivity().getString(R.string.false_age))\r\n                        || complaint.equals(getActivity().getString(R.string.false_city))\r\n                        || complaint.equals(getActivity().getString(R.string.false_country))\r\n                        || complaint.equals(getActivity().getString(R.string.false_country_and_country))){\r\n                        complaint = getActivity().getString(R.string.wrong)+\" \"+data.getStringExtra(ComplainDialog.COMPLAIN_CODE);\r\n                    }\r\n                    else if(!complaint.equals(getActivity().getString(R.string.advertising_title))\r\n                        && !complaint.equals(getActivity().getString(R.string.fishing_title))\r\n                        && !complaint.equals(getActivity().getString(R.string.illegal_substance_title))\r\n                        && !complaint.equals(getActivity().getString(R.string.obscene_content_title))\r\n                        && !complaint.equals(getActivity().getString(R.string.extrimism_title))\r\n                        && !complaint.equals(getActivity().getString(R.string.pornographic_content_title))\r\n                        && !complaint.equals(getActivity().getString(R.string.threats_title))\r\n                        && !complaint.equals(getActivity().getString(R.string.married))\r\n                    ){\r\n                        complaint = getActivity().getString(R.string.illegal_photos)+\" \"+data.getStringExtra(ComplainDialog.COMPLAIN_CODE);\r\n                    }\r\n                    String text_complaint = getActivity().getString(R.string.complaint_beginning) + \"  \" + complaint +\r\n                            getActivity().getString(R.string.complaint_ending) + \"  \" + username.getText() +\r\n                            getActivity().getString(R.string.complaint_id) + \"  \" + receiverUuid;\r\n\r\n                    sendToAdmin(text_complaint);\r\n                }\r\n                else {\r\n                    activity.goToAdmin();\r\n                }\r\n            }\r\n        }\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n\r\n    private void sendToAdmin(String str){\r\n        reference.child(generateKeyToAdminChat()).child(\"message\")\r\n                .push()\r\n                .setValue(new ChatMessage(str,\r\n                        User.getCurrentUser().getName(),User.getCurrentUser().getUuid(),getActivity().getString(R.string.admin_key),getActivity().getString(R.string.not_seen_text),\r\n                        getActivity().getString(R.string.not_seen_text),receiverPhotoUrl,\"no delete\",\"no delete\",\"no\"));\r\n        Toast.makeText(getActivity(), getActivity().getString(R.string.complain_completed), Toast.LENGTH_SHORT).show();\r\n    }\r\n\r\n    public interface CallBack{\r\n        void goToAdmin();\r\n    }\r\n\r\n    /*private void blockChat(){\r\n            blockChatListener = reference.child(generateKey()).addValueEventListener(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                    for (DataSnapshot snapshot1:snapshot.getChildren()){\r\n                        if (snapshot1.getKey().equals(\"firstBlock\") && User.getCurrentUser().getUuid().equals(firstKey)){\r\n                            HashMap<String,Object> map = new HashMap<>();\r\n                            map.put(\"firstBlock\",\"block\");\r\n                            snapshot.getRef().updateChildren(map);\r\n                        }\r\n                        else if (snapshot1.getKey().equals(\"secondBlock\") && User.getCurrentUser().getUuid().equals(secondKey)){\r\n                            HashMap<String,Object> map = new HashMap<>();\r\n                            map.put(\"secondBlock\",\"block\");\r\n                            snapshot.getRef().updateChildren(map);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError error) {}\r\n            });\r\n    }\r\n\r\n    private void deleteChat(){\r\n            deleteMessageListener=reference.child(generateKey()).child(\"message\").addValueEventListener(new ValueEventListener() {\r\n                @Override\r\n                public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                    for (DataSnapshot snapshot1:snapshot.getChildren()){\r\n                        if (User.getCurrentUser().getUuid().equals(firstKey)) {\r\n                            HashMap<String, Object> hashMap = new HashMap<>();\r\n                            hashMap.put(\"firstDelete\", \"delete\");\r\n                            snapshot1.getRef().updateChildren(hashMap);\r\n                        }\r\n                        else {\r\n                            HashMap<String, Object> hashMap = new HashMap<>();\r\n                            hashMap.put(\"secondDelete\", \"delete\");\r\n                            snapshot1.getRef().updateChildren(hashMap);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n                }\r\n            });\r\n    }*/\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/yesudu/chat/ChatFragment.java	(revision 07bdd8ee0213c9c985e310e1a64bda8595da2151)
+++ app/src/main/java/com/example/yesudu/chat/ChatFragment.java	(date 1609839751688)
@@ -275,9 +275,9 @@
                                         (message.getFromUserUUID().equals(getArguments().getString(KEY_TO_RECEIVER_UUID)) && message.getToUserUUID().equals(User.getCurrentUser().getUuid()))) {
                                     HashMap<String, Object> hashMap = new HashMap<>();
                                     if ((message.getToUserUUID().equals(User.getCurrentUser().getUuid())) && (User.getCurrentUser().getUuid().equals(firstKey)))
-                                        hashMap.put("firstKey", seenText);
+                                        hashMap.put("firstSeen", seenText);
                                     else if ((message.getToUserUUID().equals(User.getCurrentUser().getUuid())) && (User.getCurrentUser().getUuid().equals(secondKey)))
-                                        hashMap.put("secondKey", seenText);
+                                        hashMap.put("secondSeen", seenText);
                                     snapshot3.getRef().updateChildren(hashMap);
                                 }
                             }
